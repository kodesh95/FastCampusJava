package fc.java.poly;

public class Dog extends Animal {

//    재정의를 하지 않음(x) --> 오류가 나지않는다.

//    부모클래스를 추상클래스로 만들고 나서는
//    재정의를 하지 않으면 오류가 난다.
//    왜냐하면 부모클래스에는 추상메소드(불완전)가 있어서 그 메소드를 구현을 할 수 없기 때문이다.
//    그것을 물려 받는 자식 클래스도 불완전 클래스가 된다.
//--> 자식클래스도 abstract를 해준다.
//    그러면 new Dog()로 객체를 생성할 수 없다.
//    따라서 자식 클래스는 불완전 클래스가 되어서는 안된다. (메소드 구현을 못하니까)

//    재정의를 반드시 하도록 유도된다.
//    eat() 의 body를 만들어라!

//    ==> 다형성이 보장이 된다!!!

    @Override
    public void eat() {
        System.out.println("강아지처럼 먹는다.");
    }
}
/*
* 다형성을 일부 보장하기 위해서 등장
* 서로 비슷한 클래스의 공통부분을 묶을 때 사용
* 단독으로 객체를 생성할 수 없다.
* 부모의 역할은 할 수 있다. (upcasting)
* 추상 메소드와 동시에 구현된 메서드를 가질 수 있다.
* */